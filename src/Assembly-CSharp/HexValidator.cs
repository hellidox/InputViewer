using System;
using System.Text.RegularExpressions;
using TMPro;
using UnityEngine;

[CreateAssetMenu(fileName = "Input Field Validator", menuName = "Clone Hero/Hex Color Input Field Validator")]
public class HexValidator : TMP_InputValidator
{
	public virtual char \u02B2\u02C0\u02C0\u02BD\u02B9\u02B3\u02B4\u02B6\u02B6\u02B9\u02B2(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "?");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	public virtual char \u02B4\u02BB\u02B5\u02BA\u02B5\u02BF\u02B3\u02BE\u02BF\u02C0\u02B2(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Languages/");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB += 0;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	public virtual char \u02BB\u02BE\u02B8\u02BA\u02BB\u02C1\u02BE\u02B4\u02BA\u02B5\u02BD(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "_CutoutTexture");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02B4\u02BF\u02B8\u02B8\u02BA\u02BC\u02B6\u02C1\u02B9\u02B8\u02B4(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "OnlineMenu");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	public virtual char \u02B8\u02B3\u02B6\u02BF\u02C1\u02C1\u02B4\u02B9\u02BE\u02BA\u02B7(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "stars");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	public virtual char \u02BD\u02B5\u02B6\u02BD\u02BA\u02B4\u02B3\u02BE\u02BB\u02B7\u02B6(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Random Song");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	public override char Validate(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "^[0123456789ABCDEF]{0,6}$");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02BC\u02B3\u02B5\u02BA\u02B6\u02BD\u02B5\u02B9\u02BD\u02C1\u02BA(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Startup Parameters:");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB += 0;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02BA\u02BB\u02B3\u02C1\u02B9\u02BC\u02C0\u02B9\u02B5\u02BC\u02B9(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "settings");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02BA\u02BC\u02BA\u02BF\u02B5\u02C1\u02C0\u02B9\u02B9\u02BC\u02B5(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "OnlineMenu");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02BC\u02C1\u02BE\u02B5\u02BB\u02C1\u02C1\u02B4\u02B2\u02B7\u02BE(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Random Song (Section)");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	public virtual char \u02B5\u02BD\u02BB\u02C0\u02B6\u02B9\u02B5\u02BA\u02BD\u02BA\u02BA(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "8EDC4F");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}
}
